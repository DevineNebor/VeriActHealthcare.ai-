version: '3.8'

services:
  # Base de donnÃ©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ccam_postgres
    environment:
      POSTGRES_DB: ccam_db
      POSTGRES_USER: ccam_user
      POSTGRES_PASSWORD: ccam_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ccam_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ccam_user -d ccam_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: ccam_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ccam_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ccam_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ccam_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockchain Hardhat Node
  hardhat:
    image: node:18-alpine
    container_name: ccam_hardhat
    working_dir: /app
    volumes:
      - ../../blockchain:/app
    ports:
      - "8545:8545"
    networks:
      - ccam_network
    command: >
      sh -c "
        npm install &&
        npx hardhat node --hostname 0.0.0.0
      "
    depends_on:
      - postgres

  # Backend FastAPI
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: ccam_backend
    environment:
      - DATABASE_URL=postgresql://ccam_user:ccam_password@postgres:5432/ccam_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - BLOCKCHAIN_RPC_URL=http://hardhat:8545
      - LLM_API_KEY=${LLM_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ../../backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - ccam_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      hardhat:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: ccam_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_BLOCKCHAIN_URL=http://localhost:8545
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - ccam_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent IA Worker
  ai_worker:
    build:
      context: ../../agent_ai
      dockerfile: Dockerfile
    container_name: ccam_ai_worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - LLM_API_KEY=${LLM_API_KEY}
      - DATABASE_URL=postgresql://ccam_user:ccam_password@postgres:5432/ccam_db
    volumes:
      - ../../agent_ai:/app
      - ai_worker_logs:/app/logs
    networks:
      - ccam_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["python", "-m", "celery", "-A", "worker", "worker", "--loglevel=info"]

  # Celery Beat (scheduler)
  celery_beat:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: ccam_celery_beat
    environment:
      - DATABASE_URL=postgresql://ccam_user:ccam_password@postgres:5432/ccam_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ../../backend:/app
    networks:
      - ccam_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["python", "-m", "celery", "-A", "worker", "beat", "--loglevel=info"]

  # Monitoring Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ccam_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ccam_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ccam_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - ccam_network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ccam_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ccam_network
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  backend_logs:
  ai_worker_logs:
  prometheus_data:
  grafana_data:

networks:
  ccam_network:
    driver: bridge