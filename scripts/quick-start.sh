#!/bin/bash

# Script de d√©marrage rapide pour CCAM AI + Blockchain
# Lance l'application compl√®te en mode d√©veloppement

set -e

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DOCKER_COMPOSE_FILE="$PROJECT_ROOT/infra/docker/docker-compose.yml"
ENV_FILE="$PROJECT_ROOT/.env"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO: $1${NC}"
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Python
    if ! command -v python3 &> /dev/null; then
        error "Python 3 n'est pas install√©"
        exit 1
    fi
    
    log "Tous les pr√©requis sont satisfaits"
}

# Fonction pour configurer l'environnement
setup_environment() {
    log "Configuration de l'environnement..."
    
    # Cr√©er le fichier .env s'il n'existe pas
    if [ ! -f "$ENV_FILE" ]; then
        info "Cr√©ation du fichier .env..."
        cp "$PROJECT_ROOT/.env.example" "$ENV_FILE"
        warn "Veuillez configurer les variables d'environnement dans .env"
        warn "Particuli√®rement LLM_API_KEY, SECRET_KEY, et JWT_SECRET_KEY"
    else
        info "Fichier .env d√©j√† existant"
    fi
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p "$PROJECT_ROOT/logs"
    mkdir -p "$PROJECT_ROOT/data"
    mkdir -p "$PROJECT_ROOT/backups"
    
    log "Environnement configur√©"
}

# Fonction pour installer les d√©pendances
install_dependencies() {
    log "Installation des d√©pendances..."
    
    # Backend Python
    if [ -f "$PROJECT_ROOT/backend/requirements.txt" ]; then
        info "Installation des d√©pendances Python..."
        cd "$PROJECT_ROOT/backend"
        pip3 install -r requirements.txt
    fi
    
    # Frontend Node.js
    if [ -f "$PROJECT_ROOT/frontend/package.json" ]; then
        info "Installation des d√©pendances Node.js..."
        cd "$PROJECT_ROOT/frontend"
        npm install
    fi
    
    # Blockchain
    if [ -f "$PROJECT_ROOT/blockchain/package.json" ]; then
        info "Installation des d√©pendances blockchain..."
        cd "$PROJECT_ROOT/blockchain"
        npm install
    fi
    
    log "D√©pendances install√©es"
}

# Fonction pour d√©ployer les smart contracts
deploy_contracts() {
    log "D√©ploiement des smart contracts..."
    
    cd "$PROJECT_ROOT/blockchain"
    
    # Compiler les contrats
    info "Compilation des smart contracts..."
    npx hardhat compile
    
    # Attendre que le n≈ìud Hardhat soit pr√™t
    info "Attente du n≈ìud Hardhat..."
    sleep 10
    
    # D√©ployer les contrats
    info "D√©ploiement des contrats..."
    npx hardhat run scripts/deploy.js --network local
    
    log "Smart contracts d√©ploy√©s"
}

# Fonction pour synchroniser le r√©f√©rentiel CCAM
sync_ccam() {
    log "Synchronisation du r√©f√©rentiel CCAM..."
    
    if [ -f "$PROJECT_ROOT/scripts/sync_ccam.sh" ]; then
        cd "$PROJECT_ROOT"
        ./scripts/sync_ccam.sh
    else
        warn "Script de synchronisation CCAM non trouv√©"
    fi
}

# Fonction pour lancer les services
start_services() {
    log "D√©marrage des services..."
    
    cd "$PROJECT_ROOT/infra/docker"
    
    # Lancer les services de base
    info "D√©marrage des services de base (PostgreSQL, Redis, RabbitMQ)..."
    docker-compose up -d postgres redis rabbitmq
    
    # Attendre que les services soient pr√™ts
    info "Attente de la disponibilit√© des services..."
    sleep 15
    
    # Lancer le n≈ìud blockchain
    info "D√©marrage du n≈ìud blockchain..."
    docker-compose up -d hardhat
    
    # Attendre que le n≈ìud soit pr√™t
    sleep 10
    
    # D√©ployer les contrats
    deploy_contracts
    
    # Lancer le backend
    info "D√©marrage du backend..."
    docker-compose up -d backend
    
    # Attendre que le backend soit pr√™t
    sleep 10
    
    # Lancer le frontend
    info "D√©marrage du frontend..."
    docker-compose up -d frontend
    
    # Lancer les workers
    info "D√©marrage des workers IA..."
    docker-compose up -d ai_worker celery_beat
    
    log "Tous les services sont d√©marr√©s"
}

# Fonction pour v√©rifier le statut des services
check_status() {
    log "V√©rification du statut des services..."
    
    cd "$PROJECT_ROOT/infra/docker"
    
    # V√©rifier les conteneurs
    docker-compose ps
    
    # V√©rifier les endpoints
    info "V√©rification des endpoints..."
    
    # Backend
    if curl -f http://localhost:8000/health &> /dev/null; then
        log "‚úì Backend accessible"
    else
        warn "‚úó Backend non accessible"
    fi
    
    # Frontend
    if curl -f http://localhost:3000 &> /dev/null; then
        log "‚úì Frontend accessible"
    else
        warn "‚úó Frontend non accessible"
    fi
    
    # Blockchain
    if curl -f -X POST -H "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
        http://localhost:8545 &> /dev/null; then
        log "‚úì Blockchain accessible"
    else
        warn "‚úó Blockchain non accessible"
    fi
}

# Fonction pour afficher les informations d'acc√®s
show_access_info() {
    log "=== INFORMATIONS D'ACC√àS ==="
    echo ""
    echo "üåê Frontend: http://localhost:3000"
    echo "üîß Backend API: http://localhost:8000"
    echo "üìä API Documentation: http://localhost:8000/docs"
    echo "üîó Blockchain: http://localhost:8545"
    echo "üìà Prometheus: http://localhost:9090"
    echo "üìä Grafana: http://localhost:3001 (admin/admin)"
    echo "üê∞ RabbitMQ: http://localhost:15672 (guest/guest)"
    echo ""
    echo "üìÅ Logs: $PROJECT_ROOT/logs"
    echo "üìÅ Donn√©es: $PROJECT_ROOT/data"
    echo ""
    echo "üõ†Ô∏è  Commandes utiles:"
    echo "  - Arr√™ter: docker-compose down"
    echo "  - Logs: docker-compose logs -f [service]"
    echo "  - Red√©marrer: docker-compose restart [service]"
    echo ""
}

# Fonction pour nettoyer
cleanup() {
    log "Nettoyage..."
    
    cd "$PROJECT_ROOT/infra/docker"
    
    # Arr√™ter tous les services
    docker-compose down
    
    # Supprimer les volumes si demand√©
    if [ "$1" = "--clean" ]; then
        warn "Suppression des volumes (donn√©es perdues)..."
        docker-compose down -v
    fi
    
    log "Nettoyage termin√©"
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [COMMANDE]"
    echo ""
    echo "Commandes:"
    echo "  start       D√©marre l'application compl√®te"
    echo "  stop        Arr√™te tous les services"
    echo "  restart     Red√©marre tous les services"
    echo "  status      Affiche le statut des services"
    echo "  logs        Affiche les logs en temps r√©el"
    echo "  clean       Arr√™te et nettoie les volumes"
    echo "  setup       Configure l'environnement initial"
    echo "  help        Affiche cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 start    # D√©marre l'application"
    echo "  $0 status   # V√©rifie le statut"
    echo "  $0 clean    # Nettoie compl√®tement"
}

# Fonction principale
main() {
    case "${1:-start}" in
        "start")
            check_prerequisites
            setup_environment
            install_dependencies
            start_services
            check_status
            show_access_info
            ;;
        "stop")
            cd "$PROJECT_ROOT/infra/docker"
            docker-compose down
            log "Services arr√™t√©s"
            ;;
        "restart")
            cd "$PROJECT_ROOT/infra/docker"
            docker-compose restart
            log "Services red√©marr√©s"
            ;;
        "status")
            check_status
            ;;
        "logs")
            cd "$PROJECT_ROOT/infra/docker"
            docker-compose logs -f
            ;;
        "clean")
            cleanup --clean
            ;;
        "setup")
            check_prerequisites
            setup_environment
            install_dependencies
            log "Configuration initiale termin√©e"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            error "Commande inconnue: $1"
            show_help
            exit 1
            ;;
    esac
}

# Gestion des erreurs
trap 'error "Erreur survenue √† la ligne $LINENO. Arr√™t du script."; exit 1' ERR

# Ex√©cution du script
main "$@"