const { ethers } = require("hardhat");

async function main() {
  console.log("üöÄ D√©ploiement du contrat CCAMRegistry...");

  // R√©cup√©rer le compte de d√©ploiement
  const [deployer] = await ethers.getSigners();
  console.log("üìù D√©ploiement avec le compte:", deployer.address);
  console.log("üí∞ Balance du compte:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)), "ETH");

  // D√©ployer le contrat CCAMRegistry
  const CCAMRegistry = await ethers.getContractFactory("CCAMRegistry");
  const ccamRegistry = await CCAMRegistry.deploy();
  await ccamRegistry.waitForDeployment();

  const contractAddress = await ccamRegistry.getAddress();
  console.log("‚úÖ CCAMRegistry d√©ploy√© √† l'adresse:", contractAddress);

  // V√©rifier les r√¥les par d√©faut
  const DEFAULT_ADMIN_ROLE = await ccamRegistry.DEFAULT_ADMIN_ROLE();
  const VALIDATOR_ROLE = await ccamRegistry.VALIDATOR_ROLE();
  const OVERRIDE_ROLE = await ccamRegistry.OVERRIDE_ROLE();
  const AUDIT_ROLE = await ccamRegistry.AUDIT_ROLE();

  console.log("üîê R√¥les configur√©s:");
  console.log("  - DEFAULT_ADMIN_ROLE:", DEFAULT_ADMIN_ROLE);
  console.log("  - VALIDATOR_ROLE:", VALIDATOR_ROLE);
  console.log("  - OVERRIDE_ROLE:", OVERRIDE_ROLE);
  console.log("  - AUDIT_ROLE:", AUDIT_ROLE);

  // V√©rifier que le d√©ployeur a tous les r√¥les
  const hasAdminRole = await ccamRegistry.hasRole(DEFAULT_ADMIN_ROLE, deployer.address);
  const hasValidatorRole = await ccamRegistry.hasRole(VALIDATOR_ROLE, deployer.address);
  const hasOverrideRole = await ccamRegistry.hasRole(OVERRIDE_ROLE, deployer.address);
  const hasAuditRole = await ccamRegistry.hasRole(AUDIT_ROLE, deployer.address);

  console.log("üë§ R√¥les du d√©ployeur:");
  console.log("  - Admin:", hasAdminRole);
  console.log("  - Validator:", hasValidatorRole);
  console.log("  - Override:", hasOverrideRole);
  console.log("  - Audit:", hasAuditRole);

  // Enregistrer une version de test du r√©f√©rentiel CCAM
  console.log("üìö Enregistrement d'une version de test du r√©f√©rentiel CCAM...");
  
  const testVersion = "2024.1";
  const testNom = "CCAM 2024 - Version 1";
  const testChecksum = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
  const testDateEffet = Math.floor(Date.now() / 1000); // Maintenant
  const testDateFin = 0; // Pas de date de fin

  try {
    const tx = await ccamRegistry.registerVersion(
      testVersion,
      testNom,
      testChecksum,
      testDateEffet,
      testDateFin
    );
    await tx.wait();
    console.log("‚úÖ Version de test enregistr√©e:", testVersion);
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement de la version de test:", error.message);
  }

  // Test d'enregistrement d'un acte
  console.log("üè• Test d'enregistrement d'un acte...");
  
  const testNumeroActe = "ACTE-2024-001";
  const testPatientId = "PAT-12345";
  const testCodeCCAM = "HHFA001";
  const testVersionCCAM = "2024.1";
  const testJustification = "Test d'enregistrement d'acte";

  try {
    const tx = await ccamRegistry.registerActe(
      testNumeroActe,
      testPatientId,
      testCodeCCAM,
      testVersionCCAM,
      testJustification
    );
    const receipt = await tx.wait();
    console.log("‚úÖ Acte de test enregistr√©:", testNumeroActe);
    console.log("üìã Transaction hash:", receipt.hash);
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement de l'acte de test:", error.message);
  }

  // Afficher les informations de d√©ploiement
  console.log("\nüéâ D√©ploiement termin√© avec succ√®s!");
  console.log("=".repeat(50));
  console.log("üìã Informations de d√©ploiement:");
  console.log("  - Contrat: CCAMRegistry");
  console.log("  - Adresse:", contractAddress);
  console.log("  - R√©seau:", network.name);
  console.log("  - D√©ployeur:", deployer.address);
  console.log("=".repeat(50));

  // Sauvegarder les informations de d√©ploiement
  const deploymentInfo = {
    contract: "CCAMRegistry",
    address: contractAddress,
    network: network.name,
    deployer: deployer.address,
    timestamp: new Date().toISOString(),
    roles: {
      DEFAULT_ADMIN_ROLE,
      VALIDATOR_ROLE,
      OVERRIDE_ROLE,
      AUDIT_ROLE
    }
  };

  // √âcrire dans un fichier pour utilisation par le backend
  const fs = require("fs");
  const path = require("path");
  
  const deploymentPath = path.join(__dirname, "..", "deployment.json");
  fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
  console.log("üíæ Informations de d√©ploiement sauvegard√©es dans:", deploymentPath);

  return {
    contractAddress,
    deploymentInfo
  };
}

// Fonction pour ajouter des r√¥les √† d'autres adresses
async function addRoles(contractAddress, userAddress, roles) {
  const CCAMRegistry = await ethers.getContractFactory("CCAMRegistry");
  const ccamRegistry = CCAMRegistry.attach(contractAddress);

  for (const role of roles) {
    try {
      const tx = await ccamRegistry.grantRole(role, userAddress);
      await tx.wait();
      console.log(`‚úÖ R√¥le ${role} accord√© √† ${userAddress}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'attribution du r√¥le ${role}:`, error.message);
    }
  }
}

// Fonction pour r√©cup√©rer les informations du contrat
async function getContractInfo(contractAddress) {
  const CCAMRegistry = await ethers.getContractFactory("CCAMRegistry");
  const ccamRegistry = CCAMRegistry.attach(contractAddress);

  const totalActes = await ccamRegistry.getTotalActes();
  const totalOverrides = await ccamRegistry.getTotalOverrides();
  const totalVersions = await ccamRegistry.getTotalVersions();

  console.log("üìä Statistiques du contrat:");
  console.log("  - Total actes:", totalActes.toString());
  console.log("  - Total overrides:", totalOverrides.toString());
  console.log("  - Total versions:", totalVersions.toString());

  return {
    totalActes: totalActes.toString(),
    totalOverrides: totalOverrides.toString(),
    totalVersions: totalVersions.toString()
  };
}

// Exporter les fonctions pour utilisation dans d'autres scripts
module.exports = {
  main,
  addRoles,
  getContractInfo
};

// Ex√©cuter le d√©ploiement si le script est appel√© directement
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("‚ùå Erreur lors du d√©ploiement:", error);
      process.exit(1);
    });
}